#!/usr/bin/env python

from optparse import OptionParser
import ConfigParser
import os
import sys
import json

# generate a colored-term

try:
    from termcolor import colored
except:
    ATTRIBUTES = dict(list(zip(
        ['bold', 'dark', '', 'underline', 'blink', '', 'reverse', 'concealed'], list(range(1, 9)))))
    del ATTRIBUTES['']
    HIGHLIGHTS = dict(list(zip(['on_grey', 'on_red', 'on_green', 'on_yellow',
                                'on_blue', 'on_magenta', 'on_cyan', 'on_white'], list(range(40, 48)))))
    COLORS = dict(list(zip(['grey', 'red', 'green', 'yellow',
                            'blue', 'magenta', 'cyan', 'white', ], list(range(30, 38)))))
    RESET = '\033[0m'

    def colored(text, color=None, on_color=None, attrs=None):
        fmt_str = '\033[%dm%s'
        if color is not None:
            text = fmt_str % (COLORS[color], text)
        if on_color is not None:
            text = fmt_str % (HIGHLIGHTS[on_color], text)
        if attrs is not None:
            for attr in attrs:
                text = fmt_str % (ATTRIBUTES[attr], text)

        text += RESET
        return text


try:
    from shell_template import *
except ImportError:
    print colored('[-] Missing shell-template!', 'red')
    sys.exit(1)

pkg_manager = ""
rc_manager = ""
system = ""
config_file = "ss_deployer.conf"
only_shadow = False
ss_config = {}
ipv6_config = {}


def check_system():
    global pkg_manager, rc_manager

    if os.path.exists('/usr/bin/apt-get'):
        pkg_manager = 'apt-get'
    elif os.path.exists('/usr/bin/yum'):
        pkg_manager = 'yum'
    else:
        print colored('[-] No pkg-manager found!', 'red')
        sys.exit(1)

    print colored('[+] Detected %s' % pkg_manager, 'green')

    if os.path.exists('/usr/bin/chkconfig'):
        rc_manager = 'chkconfig'
    elif os.path.exists('/usr/sbin/update-rc.d') or os.path.exists('/usr/bin/update-rc.d'):
        rc_manager = 'update-rc.d'
    else:
        print colored('[-] No rc-manager found!', 'red')
        sys.exit(1)

    print colored('[+] Detected %s' % rc_manager, 'green')


def parse_config():
    global ss_config, ipv6config

    cf = ConfigParser.ConfigParser()
    if not os.path.exists(config_file):
        print colored('[-] Cannot find config file: %s' % config_file, 'red')
        sys.exit(1)
    cf.read(config_file)
    ss_config = dict(cf.items('shadowsocks'))
    ipv6config = dict(cf.items('ipv6'))

    # multi-user should be handled
    if 'port_password' in ss_config:
        group = ss_config['port_password']
        group = dict(map(lambda x: tuple(x.split(':')), group.split(';')))
        ss_config['port_password'] = group


def parse_args():
    global config_file, only_shadow

    usage = 'Usage: %prog [options] '
    parser = OptionParser(usage=usage)
    parser.add_option('-s', '--shadowsocks', default=False,
                      help='only install shadowsocks, no ipv6 config', action='store_true', dest='only_shadow')
    parser.add_option('-c', '--config-file', default='ss-deployer.conf',
                      help='specific a config file replacing default', action='store', dest='config_file')
    (options, args) = parser.parse_args()
    config_file = options.config_file
    only_shadow = options.only_shadow


def main():
    print colored('[*] Program start ...', 'yellow')
    try:
        os.setuid(0)
    except:
        print colored('[*] You should run on root!', 'red')
        sys.exit(1)
    parse_args()
    check_system()
    parse_config()
    print colored('[*] Generate SS config file ...', 'green')
    open('shadowsocks.json', 'w').write(json.dumps(ss_config, indent=4))

    # install shadowsocks
    print colored('[*] Installing shadowsocks ...', 'green')
    if pkg_manager == 'apt-get':
        os.system('debian/install-ss.sh')
    else:
        os.system('centos/install-ss.sh')

    # config the ipv6
    if not only_shadow:
        print colored('[*] Configuring ipv6 tunnel ...', 'green')
        if pkg_manager == 'apt-get':
            os.system('debian/compiler-tb.sh')
        else:
            os.system('centos/compiler-tb.sh')
        open('/etc/init.d/ipv6tb', 'w').write(startup_shell %
                                              (ipv6config['serveraddr'], ipv6config['clientaddr'], ipv6config['ipv6addr'], ipv6config['routeraddr']))
        if rc_manager == 'update-rc.d':
            os.system('debian/add-rc.sh')
        else:
            os.system('centos/add-rc.sh')

    print colored('[*] Done !', 'yellow')


if __name__ == '__main__':
    main()
